name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy-chromadb:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Login to Heroku Container Registry
        run: |
          heroku container:login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Pull ChromaDB image
        run: docker pull chromadb/chroma:0.5.3

      - name: Check if Heroku app exists
        id: check_db_app
        run: |
          if heroku apps:info $HEROKU_DB_APP_NAME > /dev/null 2>&1; then
              echo "App exists"
              echo "::set-output name=exists::true"
          else
              echo "App does not exist"
              echo "::set-output name=exists::false"
          fi
        env:
          HEROKU_DB_APP_NAME: ${{ secrets.HEROKU_DB_APP_NAME }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Create Heroku app
        if: steps.check_db_app.outputs.exists == 'false'
        run: heroku create $HEROKU_DB_APP_NAME
        env:
          HEROKU_DB_APP_NAME: ${{ secrets.HEROKU_DB_APP_NAME }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Tag and push to Heroku
        env:
          HEROKU_DB_APP_NAME: ${{ secrets.HEROKU_DB_APP_NAME }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "FROM chromadb/chroma:0.5.3" > Dockerfile.chromadb
          echo 'CMD ["uvicorn", "chromadb.app:app", "--reload", "--workers", "1", "--host", "0.0.0.0", "--port", "$PORT", "--log-config", "chromadb/log_config.yml", "--timeout-keep-alive", "30"]' >> Dockerfile.chromadb
          docker build -f Dockerfile.chromadb -t registry.heroku.com/$HEROKU_DB_APP_NAME/web .
          docker push registry.heroku.com/$HEROKU_DB_APP_NAME/web

      - name: Set environment variables
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_DB_APP_NAME: ${{ secrets.HEROKU_DB_APP_NAME }}
          CHROMA_SERVER_HOST: 0.0.0.0
          CHROMA_SERVER_AUTHN_PROVIDER: chromadb.auth.token_authn.TokenAuthenticationServerProvider
          CHROMA_SERVER_AUTHN_CREDENTIALS: ${{ secrets.CHROMA_AUTH_TOKEN }}
        run: |
          heroku config:set CHROMA_SERVER_HOST=$CHROMA_SERVER_HOST --app $HEROKU_DB_APP_NAME
          heroku config:set CHROMA_SERVER_PORT=$PORT --app $HEROKU_DB_APP_NAME
          heroku config:set CHROMA_SERVER_AUTHN_PROVIDER=$CHROMA_SERVER_AUTHN_PROVIDER --app $HEROKU_DB_APP_NAME
          heroku config:set CHROMA_SERVER_AUTHN_CREDENTIALS=$CHROMA_SERVER_AUTHN_CREDENTIALS --app $HEROKU_DB_APP_NAME

      - name: Set the stack to container
        run: heroku stack:set container --app $HEROKU_DB_APP_NAME
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_DB_APP_NAME: ${{ secrets.HEROKU_DB_APP_NAME }}

      - name: Release the app
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_DB_APP_NAME: ${{ secrets.HEROKU_DB_APP_NAME }}
        run: heroku container:release web --app $HEROKU_DB_APP_NAME

  deploy-telegram-bot:
    runs-on: ubuntu-latest
    needs: deploy-chromadb
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Login to Heroku Container Registry
        run: |
          heroku container:login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Check if Heroku app exists
        id: check_db_app
        run: |
          if heroku apps:info $HEROKU_APP_NAME > /dev/null 2>&1; then
              echo "App exists"
              echo "::set-output name=exists::true"
          else
              echo "App does not exist"
              echo "::set-output name=exists::false"
          fi
        env:
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Create Heroku app
        if: steps.check_db_app.outputs.exists == 'false'
        run: heroku create $HEROKU_APP_NAME
        env:
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Build, tag and push to Heroku
        env:
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          docker build -t registry.heroku.com/$HEROKU_APP_NAME/web .
          docker push registry.heroku.com/$HEROKU_APP_NAME/web

      - name: Set environment variables
        env:
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          ENV: ${{ secrets.ENV }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_WEBHOOK_URL: ${{ secrets.TELEGRAM_WEBHOOK_URL }}
          TELEGRAM_WEBHOOK_SECRET: ${{ secrets.TELEGRAM_WEBHOOK_SECRET }}
          CHROMA_CLIENT_HOST: ${{ secrets.CHROMA_CLIENT_HOST }}
          CHROMA_CLIENT_PORT: 443
          CHROMA_CLIENT_AUTH_CREDENTIALS: ${{ secrets.CHROMA_AUTH_TOKEN }}
          CHROMA_CLIENT_AUTH_PROVIDER: chromadb.auth.token_authn.TokenAuthClientProvider
          CHROMA_COLLECTION_NAME: ${{ secrets.CHROMA_COLLECTION_NAME }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          EMBEDDING_MODEL: ${{ secrets.EMBEDDING_MODEL }}
          SUMMARISATION_MODEL: ${{ secrets.SUMMARISATION_MODEL }}
        run: |
          heroku config:set ENV=$ENV --app $HEROKU_APP_NAME
          heroku config:set TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN --app $HEROKU_APP_NAME
          heroku config:set TELEGRAM_WEBHOOK_URL=$TELEGRAM_WEBHOOK_URL --app $HEROKU_APP_NAME
          heroku config:set TELEGRAM_WEBHOOK_SECRET=$TELEGRAM_WEBHOOK_SECRET --app $HEROKU_APP_NAME
          heroku config:set CHROMA_CLIENT_HOST=$CHROMA_CLIENT_HOST --app $HEROKU_APP_NAME
          heroku config:set CHROMA_CLIENT_PORT=$CHROMA_CLIENT_PORT --app $HEROKU_APP_NAME
          heroku config:set CHROMA_CLIENT_AUTH_CREDENTIALS=$CHROMA_CLIENT_AUTH_CREDENTIALS --app $HEROKU_APP_NAME
          heroku config:set CHROMA_CLIENT_AUTH_PROVIDER=$CHROMA_CLIENT_AUTH_PROVIDER --app $HEROKU_APP_NAME
          heroku config:set CHROMA_COLLECTION_NAME=$CHROMA_COLLECTION_NAME --app $HEROKU_APP_NAME
          heroku config:set OPENAI_API_KEY=$OPENAI_API_KEY --app $HEROKU_APP_NAME
          heroku config:set EMBEDDING_MODEL=$EMBEDDING_MODEL --app $HEROKU_APP_NAME
          heroku config:set SUMMARISATION_MODEL=$SUMMARISATION_MODEL --app $HEROKU_APP_NAME

      - name: Set the stack to container
        run: heroku stack:set container --app $HEROKU_APP_NAME
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}

      - name: Release the app
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: heroku container:release web --app $HEROKU_APP_NAME
